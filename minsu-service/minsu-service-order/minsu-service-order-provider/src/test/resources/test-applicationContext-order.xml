<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	<context:component-scan base-package="com.ziroom.minsu.services.order" />
	<context:component-scan base-package="com.asura"/>
    <context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true" />



    <!-- 启用 aspectj 动 态代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 校验参数 -->
    <bean id="order.messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:message/order-validator</value>
                <value>classpath:message/order-message</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    <bean id="order.validatorFactory"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <property name="validationMessageSource" ref="order.messageSource"/>
    </bean>
    <bean id="order.validator" factory-bean="order.validatorFactory" factory-method="getValidator"/>
    
	<!--数据源配置 -->
	<!-- cat监控 -->
    <bean id="stat-filter" class="com.ziroom.platform.tesla.druid.filter.CatStatFilter" />
    <!--数据源配置 -->
    <bean id="minsuOrder.druid" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- log4j 或者 slf4j, 根据具体项目所用的log依赖选择 -->
        <property name="filters" value="slf4j"/>
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
            </list>
        </property>
    </bean>

    <bean id="order.datasource.M" parent="minsuOrder.druid"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${druid.jdbc.mysql.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.order.url.master}"/>
        <property name="username" value="${jdbc.order.username.master}"/>
        <property name="password" value="${jdbc.order.password.master}"/>
        <property name="validationQuery" value="${druid.mysql.validationQuer}" />
    </bean>

    <bean id="order.datasource.S" parent="minsuOrder.druid"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${druid.jdbc.mysql.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.order.url.slave}"/>
        <property name="username" value="${jdbc.order.username.slave}"/>
        <property name="password" value="${jdbc.order.password.slave}"/>
        <property name="validationQuery" value="${druid.mysql.validationQuer}" />
    </bean>
	
	
	
	<bean id="order.sqlSessionFactory.M" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="order.datasource.M"/>
    	<property name="mapperLocations" value="classpath*:com/ziroom/minsu/services/order/dao/map/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
     <bean id="order.sqlSessionFactory.S" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="order.datasource.S"/>
    	<property name="mapperLocations" value="classpath*:com/ziroom/minsu/services/order/dao/map/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    
     <bean id="order.writeSqlSessionTemplate.M" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="order.sqlSessionFactory.M"/>
    </bean>
    
     <bean id="order.writeSqlSessionTemplate.S" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="order.sqlSessionFactory.S"/>
    </bean>
    
    <bean id="order.MybatisDaoContext" class="com.asura.framework.dao.mybatis.base.MybatisDaoContext">
        <property name="writeSqlSessionTemplate" ref="order.writeSqlSessionTemplate.M"></property>
        <property name="readSqlSessionTemplate" ref="order.writeSqlSessionTemplate.S"></property>
    </bean>

    <bean id="rabbitConnectionFactory" class="com.asura.framework.rabbitmq.connection.RabbitConnectionFactory"
          init-method="init" destroy-method="closeConnection"/>

    <bean id="house.queueName" class="com.asura.framework.rabbitmq.entity.QueueName">
        <constructor-arg  index="0" value="${fresh.search.system}" />
        <constructor-arg  index="1" value="${fresh.search.module}"/>
        <constructor-arg  index="2" value="${fresh.search.function}"/>
    </bean>

    <bean id="behavior.queueName" class="com.asura.framework.rabbitmq.entity.QueueName">
        <constructor-arg index="0" value="${customer.behavior.system}"/>
        <constructor-arg index="1" value="${customer.behavior.module}"/>
        <constructor-arg index="2" value="${customer.behavior.function}"/>
    </bean>

    <bean id="house.rabbitSendClient" class="com.asura.framework.rabbitmq.send.RabbitMqSendClient"
          destroy-method="closeChannel">
        <property name="rabbitConnectionFactory" ref="rabbitConnectionFactory"/>
    </bean>


    <bean id="order.transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="order.datasource.M" />
	</bean>

     <tx:advice id="order.txAdvice" transaction-manager="order.transactionManager">
		<tx:attributes>
            <tx:method name="cancle*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.ziroom.minsu.services.order.service.*.*(..))" />
		<aop:advisor advice-ref="order.txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
<!-- 	 <import resource="classpath:META-INF/spring/evaluate-inner-consumer.xml"/>-->
	<!---->
	 <import resource="classpath:META-INF/spring/basedata-inner-consumer.xml"/>

    <import resource="classpath:META-INF/spring/cms-inner-consumer.xml"/>


    <import resource="classpath:META-INF/spring/house-inner-consumer.xml"/>

    <import resource="classpath:META-INF/spring/customer-inner-consumer.xml"/>

    <import resource="classpath:META-INF/spring/order-provider.xml" />
</beans>
